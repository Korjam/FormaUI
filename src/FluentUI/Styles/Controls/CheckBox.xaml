<ResourceDictionary
  xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
  xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml">
  
  <Style TargetType="{x:Type CheckBox}">
    <Setter Property="FocusVisualStyle" Value="{DynamicResource FocusVisual}" />
    <Setter Property="FontFamily" Value="{DynamicResource ControlFontFamily}" />
    <Setter Property="FontSize" Value="{DynamicResource BodyFontSize}" />
    <Setter Property="FontWeight" Value="{DynamicResource BodyFontWeight}" />
    <Setter Property="Background" Value="{DynamicResource ControlAltFillColorSecondaryBrush}" />
    <Setter Property="BorderBrush" Value="{DynamicResource ControlStrongStrokeColorDefaultBrush}" />
    <Setter Property="Foreground" Value="{DynamicResource TextFillColorPrimaryBrush}" />
    <Setter Property="HorizontalAlignment" Value="Left" />
    <Setter Property="VerticalContentAlignment" Value="Center" />
    <Setter Property="BorderThickness" Value="1" />
    <Setter Property="Template">
      <Setter.Value>
        <ControlTemplate TargetType="{x:Type CheckBox}">
          <Grid x:Name="templateRoot"
                SnapsToDevicePixels="True"
                Background="Transparent">
            <Grid.ColumnDefinitions>
              <ColumnDefinition Width="Auto" />
              <ColumnDefinition Width="*" />
            </Grid.ColumnDefinitions>
            <Border HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}" 
                    BorderThickness="{TemplateBinding BorderThickness}" 
                    Background="{TemplateBinding Background}" 
                    BorderBrush="{TemplateBinding BorderBrush}"
                    Height="20"
                    Width="20"
                    CornerRadius="4">
              <TextBlock x:Name="optionMark"
                         FontFamily="{DynamicResource IconsFontFamily}"
                         FontSize="12"
                         Foreground="{DynamicResource TextOnAccentFillColorPrimaryBrush}"
                         HorizontalAlignment="Center"
                         VerticalAlignment="Center"
                         Text="&#xF78C;"
                         Visibility="Hidden" />
            </Border>
            <ContentPresenter x:Name="contentPresenter" 
                              RecognizesAccessKey="True" 
                              Grid.Column="1" 
                              Margin="{TemplateBinding Padding}" 
                              SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
                              HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" 
                              VerticalAlignment="{TemplateBinding VerticalContentAlignment}" 
                              Focusable="False" />
          </Grid>
          <ControlTemplate.Triggers>
            <Trigger Property="HasContent" Value="True">
              <Setter Property="Padding" Value="8,5,0,7" />
              <Setter Property="Margin" Value="4,0,8,0" TargetName="templateRoot" />
            </Trigger>
            <Trigger Property="IsChecked" Value="True">
              <Setter Property="Visibility" Value="Visible" TargetName="optionMark" />
              <Setter Property="Text" Value="&#xF78C;" TargetName="optionMark" />
              <Setter Property="Background" Value="{DynamicResource AccentFillColorDefaultBrush}" />
              <Setter Property="BorderThickness" Value="0" />
            </Trigger>
            <Trigger Property="IsChecked" Value="{x:Null}">
              <Setter Property="Visibility" Value="Visible" TargetName="optionMark" />
              <Setter Property="Text" Value="&#xE629;" TargetName="optionMark" />
              <Setter Property="Background" Value="{DynamicResource AccentFillColorDefaultBrush}" />
              <Setter Property="BorderThickness" Value="0" />
            </Trigger>
            <Trigger Property="IsEnabled" Value="False">
              <Setter Property="Foreground" Value="{DynamicResource TextFillColorDisabledBrush}" />
            </Trigger>
            
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding IsChecked, RelativeSource={RelativeSource Self}}" Value="False" />
                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter Property="Background" Value="{DynamicResource ControlAltFillColorTertiaryBrush}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding IsChecked, RelativeSource={RelativeSource Self}}" Value="False" />
                <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter Property="Background" Value="{DynamicResource ControlAltFillColorQuarternaryBrush}" />
              <Setter Property="BorderBrush" Value="{DynamicResource ControlStrongColorDisabledBrush}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding IsChecked, RelativeSource={RelativeSource Self}}" Value="False" />
                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="False" />
              </MultiDataTrigger.Conditions>
              <Setter Property="Background" Value="{DynamicResource ControlAltFillColorDisabledBrush}" />
              <Setter Property="BorderBrush" Value="{DynamicResource ControlStrongColorDisabledBrush}" />
            </MultiDataTrigger>

            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding IsChecked, RelativeSource={RelativeSource Self}}" Value="True" />
                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter Property="Background" Value="{DynamicResource AccentFillColorSecondaryBrush}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding IsChecked, RelativeSource={RelativeSource Self}}" Value="True" />
                <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter Property="Background" Value="{DynamicResource AccentFillColorTertiaryBrush}" />
              <Setter Property="Foreground" Value="{DynamicResource TextOnAccentFillColorSecondaryBrush}" TargetName="optionMark" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding IsChecked, RelativeSource={RelativeSource Self}}" Value="True" />
                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="False" />
              </MultiDataTrigger.Conditions>
              <Setter Property="Background" Value="{DynamicResource AccentFillColorDisabledBrush}" />
              <Setter Property="Foreground" Value="{DynamicResource TextOnAccentFillColorDisabledBrush}" TargetName="optionMark" />
            </MultiDataTrigger>

            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding IsChecked, RelativeSource={RelativeSource Self}}" Value="{x:Null}" />
                <Condition Binding="{Binding IsMouseOver, RelativeSource={RelativeSource Self}}" Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter Property="Background" Value="{DynamicResource AccentFillColorSecondaryBrush}" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding IsChecked, RelativeSource={RelativeSource Self}}" Value="{x:Null}" />
                <Condition Binding="{Binding IsPressed, RelativeSource={RelativeSource Self}}" Value="True" />
              </MultiDataTrigger.Conditions>
              <Setter Property="Background" Value="{DynamicResource AccentFillColorTertiaryBrush}" />
              <Setter Property="Foreground" Value="{DynamicResource TextOnAccentFillColorSecondaryBrush}" TargetName="optionMark" />
            </MultiDataTrigger>
            <MultiDataTrigger>
              <MultiDataTrigger.Conditions>
                <Condition Binding="{Binding IsChecked, RelativeSource={RelativeSource Self}}" Value="{x:Null}" />
                <Condition Binding="{Binding IsEnabled, RelativeSource={RelativeSource Self}}" Value="False" />
              </MultiDataTrigger.Conditions>
              <Setter Property="Background" Value="{DynamicResource AccentFillColorDisabledBrush}" />
              <Setter Property="Foreground" Value="{DynamicResource TextOnAccentFillColorDisabledBrush}" TargetName="optionMark" />
            </MultiDataTrigger>

          </ControlTemplate.Triggers>
        </ControlTemplate>
      </Setter.Value>
    </Setter>
  </Style>
</ResourceDictionary>